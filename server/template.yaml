AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    aws-audio-recorder

    Sample SAM Template for aws-audio-recorder

Parameters:
  HostingBucketName:
    Type: "String"
    Default: "webapp-hosting"
  AudioFilesBucketName:
    Type: "String"
    Default: "audio-files"
  SNSNewFileTopicName:
    Type: "String"
    Default: "new-audio-file-topic"
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 20
        Environment:
            Variables:
                DB_TABLE: AudioRecordingsTable
                AUDIO_FILES_BUCKET: audio-rec-dev-audio-files
                CURRENT_USER_ID: 1

Resources:

    PolicyDynamoDBReadonly:
      DependsOn:
        - "DynamoDBTable"
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: 'audio-rec-dynamodb-readonly'
        Roles:
          - !Ref LambdaApiGetRecordingsRole
          - !Ref LambdaS3CreateRecordingRole
          - !Ref LambdaApiGetRecordingRole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:Scan"
              Resource: !GetAtt [ DynamoDBTable, Arn ]

    PolicyDynamoDBWriteonly:
      DependsOn:
        - "DynamoDBTable"
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: 'audio-rec-dynamodb-writeonly'
        Roles:
          - !Ref LambdaS3CreateRecordingRole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "dynamodb:Put*"
              Resource: !GetAtt [ DynamoDBTable, Arn ]

    PolicyS3AudioFilesBucketReadonly:
      Type: AWS::IAM::Policy
      DependsOn:
        - "S3AudioFilesBucket"
      Properties:
        PolicyName: 'audio-rec-s3-audio-files-readonly'
        Roles:
            - !Ref LambdaS3CreateRecordingRole
            - !Ref LambdaApiGetRecordingRole
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: Allow
              Action:
                - "s3:Get*"
              Resource: !Join
                    - ''
                    - - !GetAtt [ S3AudioFilesBucket, Arn ]
                      - /*

    SNSNewFile:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "SNS For new Audio Files Events"
        TopicName: !Ref SNSNewFileTopicName
        Subscription:
          -
            Protocol: lambda
            Endpoint: !GetAtt [ LambdaApiGetRecordings, Arn]

    SNSNewFilePolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - !Ref SNSNewFile
        PolicyDocument:
          Id: SNSNewFilePolicy
          Version: "2012-10-17"
          Statement:
            -
              Sid: AllowS3ToPublishToSNSNewFile
              Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource: !Ref SNSNewFile
              Condition:
                ArnLike:
                  aws:SourceArn: !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Sub '${AWS::StackName}-${AudioFilesBucketName}'

    S3HostingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub '${AWS::StackName}-${HostingBucketName}'
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        Tags:
          -
            Key: AppName
            Value: AudioRecorder

    PolicyForWebHostingBucket:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: WebHostingPolicy
          Version: 2012-10-17
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3HostingBucket
                  - /*
        Bucket: !Ref S3HostingBucket

    S3AudioFilesBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - SNSNewFilePolicy
      Properties:
        BucketName: !Sub '${AWS::StackName}-${AudioFilesBucketName}'
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - "*"
              AllowedMethods:
                - POST
                - PUT
                - GET
                - DELETE
                - HEAD
              AllowedHeaders:
                - "*"
        Tags:
          -
            Key: AppName
            Value: AudioRecorder
        NotificationConfiguration:
          TopicConfigurations:
            -
              Event: s3:ObjectCreated:*
              Topic: !Ref SNSNewFile

    LayerSharedModule:
      Type: AWS::Serverless::LayerVersion
      Properties:
        LayerName: CoreModule
        Description: Application core module
        ContentUri: core/
        CompatibleRuntimes:
          - nodejs8.10

    LambdaApiGetRecordings:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: api-get-recordings/
            Handler: dist/get-recordings.lambdaHandler
            Runtime: nodejs8.10
            Role: !GetAtt [ LambdaApiGetRecordingsRole, Arn]
            Layers:
              - !Ref LayerSharedModule
            Events:
                GetRecordings:
                    Type: Api
                    Properties:
                        Path: /recordings
                        Method: get

    LambdaApiGetRecordingsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    LambdaApiGetRecording:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: api-get-recording/
            Handler: dist/get-recording.lambdaHandler
            Runtime: nodejs8.10
            Role: !GetAtt [ LambdaApiGetRecordingRole, Arn]
            Layers:
              - !Ref LayerSharedModule
            Events:
                GetRecordings:
                    Type: Api
                    Properties:
                        Path: /recordings/{recordId}
                        Method: get

    LambdaApiGetRecordingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    LambdaS3CreateRecording:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: s3-create-recording/
            Handler: dist/create-recording.lambdaHandler
            Runtime: nodejs8.10
            Role: !GetAtt [ LambdaS3CreateRecordingRole, Arn]
            Layers:
              - !Ref LayerSharedModule
            Events:
              SNSNewFileEvent:
                Type: SNS
                Properties:
                  Topic: !Ref SNSNewFile

    LambdaS3CreateRecordingRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole



    LambdaApiGetUploadUrl:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: api-get-upload-url
            Handler: dist/get-upload-url.lambdaHandler
            Runtime: nodejs8.10
            Role: !GetAtt [ LambdaApiGetUploadUrlRole, Arn]
            Layers:
              - !Ref LayerSharedModule
            Events:
                GetUploadUrl:
                    Type: Api
                    Properties:
                        Path: /upload-url
                        Method: get

    LambdaApiGetUploadUrlRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          -
            PolicyName: allow-get-signed-url-for-upload
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - "s3:PutObject"
                  Resource: !Join
                    - ''
                    - - !GetAtt [ S3AudioFilesBucket, Arn ]
                      - /*

    DynamoDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: AudioRecordingsTable
            AttributeDefinitions:
                -
                    AttributeName: userId
                    AttributeType: S
                -
                    AttributeName: recordId
                    AttributeType: S
            KeySchema:
                -
                    AttributeName: userId
                    KeyType: HASH
                -
                    AttributeName: recordId
                    KeyType: RANGE
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1
