AWSTemplateFormatVersion: '2010-09-09'
Description: 'aws-audio-recorder

  Sample SAM Template for aws-audio-recorder

  '
Globals:
  Function:
    Environment:
      Variables:
        CURRENT_USER_ID: 1
        DB_TABLE: AudioRecordingsTable
    Timeout: 20
Parameters:
  AudioFilesBucketName:
    Default: audio-files
    Type: String
  HostingBucketName:
    Default: webapp-hosting
    Type: String
  SNSNewFileTopicName:
    Default: new-audio-file-topic
    Type: String
Resources:
  DynamoDBTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: recordId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: recordId
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: AudioRecordingsTable
    Type: AWS::DynamoDB::Table
  LambdaApiGetRecordings:
    DependsOn:
    - RoleForLambdaApiGetRecordings
    Properties:
      CodeUri: s3://sosnowski-deployments/9dd5b3a1f3996cd41b6cd9840e47abaf
      Events:
        GetRecordings:
          Properties:
            Method: get
            Path: /recordings
          Type: Api
      Handler: dist/get-recordings.lambdaHandler
      Layers:
      - Ref: LayerSharedModule
      Role:
        Fn::GetAtt:
        - RoleForLambdaApiGetRecordings
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  LambdaApiGetUploadUrl:
    Properties:
      CodeUri: s3://sosnowski-deployments/bd46641b9a7f63f25677f61688d4d12b
      Events:
        GetUploadUrl:
          Properties:
            Method: get
            Path: /upload-url
          Type: Api
      Handler: dist/get-upload-url.lambdaHandler
      Layers:
      - Ref: LayerSharedModule
      Role:
        Fn::GetAtt:
        - RoleForLambdaApiGetRecordings
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  LambdaS3CreateRecording:
    DependsOn:
    - RoleForLambdaS3CreateRecording
    Properties:
      CodeUri: s3://sosnowski-deployments/54c86eb586264e15526c1db7ec720752
      Handler: dist/create-recording.lambdaHandler
      Layers:
      - Ref: LayerSharedModule
      Policies: AmazonS3ReadOnlyAccess
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  LayerSharedModule:
    Properties:
      CompatibleRuntimes:
      - nodejs8.10
      ContentUri: s3://sosnowski-deployments/684b24282d5e170834e305451721121c
      Description: Application core module
      LayerName: CoreModule
    Type: AWS::Serverless::LayerVersion
  PolicyDynamoDBReadonly:
    DependsOn:
    - DynamoDBTable
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - dynamodb:BatchGetItem
          - dynamodb:GetItem
          - dynamodb:Query
          - dynamodb:Scan
          Effect: Allow
          Resource:
            Ref: DynamoDBTable
        Version: '2012-10-17'
      PolicyName: audio-rec-dynamodb-readonly
      Roles:
      - RoleForLambdaApiGetRecordings
      - RoleForLambdaS3CreateRecording
    Type: AWS::IAM::Policy
  PolicyForWebHostingBucket:
    Properties:
      Bucket:
        Ref: S3HostingBucket
      PolicyDocument:
        Id: WebHostingPolicy
        Statement:
        - Action: s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3HostingBucket
              - /*
          Sid: PublicReadForGetBucketObjects
        Version: 2012-10-17
    Type: AWS::S3::BucketPolicy
  PolicyS3AudioFilesBucketReadonly:
    DependsOn:
    - S3AudioFilesBucket
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Ref: S3AudioFilesBucket
        Version: '2012-10-17'
      PolicyName: audio-rec-s3-audio-files-readonly
    Type: AWS::IAM::Policy
  RoleForLambdaApiGetRecordings:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - Ref: PolicyDynamoDBReadonly
    Type: AWS::IAM::Role
  RoleForLambdaS3CreateRecording:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - Ref: PolicyDynamoDBReadonly
      - Ref: PolicyS3AudioFilesBucketReadonly
      - PolicyDocument:
          Statement:
          - Action: lambda.invokeFunction
            Condition:
              ArnLike:
                AWS:SourceArn:
                  Ref: SNSNewFile
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Resource:
              Ref: LambdaS3CreateRecording
          Version: '2012-10-17'
        PolicyName: allow-sns-execution
    Type: AWS::IAM::Role
  S3AudioFilesBucket:
    DependsOn:
    - SNSNewFilePolicy
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-${AudioFilesBucketName}
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - POST
          - PUT
          - GET
          - DELETE
          - HEAD
          AllowedOrigins:
          - '*'
      NotificationConfiguration:
        TopicConfigurations:
        - Event: s3:ObjectCreated:*
          Topic:
            Ref: SNSNewFile
      Tags:
      - Key: AppName
        Value: AudioRecorder
    Type: AWS::S3::Bucket
  S3HostingBucket:
    Properties:
      AccessControl: PublicRead
      BucketName:
        Fn::Sub: ${AWS::StackName}-${HostingBucketName}
      Tags:
      - Key: AppName
        Value: AudioRecorder
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
    Type: AWS::S3::Bucket
  SNSNewFile:
    Properties:
      DisplayName: SNS For new Audio Files Events
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - LambdaS3CreateRecording
          - Arn
        Protocol: lambda
      TopicName:
        Ref: SNSNewFileTopicName
    Type: AWS::SNS::Topic
  SNSNewFilePolicy:
    Properties:
      PolicyDocument:
        Id: SNSNewFilePolicy
        Statement:
        - Action: sns:Publish
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - Fn::Sub: ${AWS::StackName}-${AudioFilesBucketName}
          Effect: Allow
          Principal:
            AWS: '*'
          Resource:
            Ref: SNSNewFile
          Sid: AllowS3ToPublishToSNSNewFile
        Version: '2012-10-17'
      Topics:
      - Ref: SNSNewFile
    Type: AWS::SNS::TopicPolicy
Transform: AWS::Serverless-2016-10-31
